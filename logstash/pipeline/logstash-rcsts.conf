# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

#input {
#  beats {
#    port => 5055
#  }
#}

input {
  kafka {
    client_id => "logstash-test-topic"
    group_id => "logstash-test-topic"
    topics => ["rcsts-common"]
    codec => json
    bootstrap_servers => "211.115.98.163:5045"
  }
}

filter {
	if [log][file][path] =~ /rcssend_([0-9]{5})_([0-9]{8}).log/ {
		 grok {
                        match => { "[log][file][path]" => "rcssend_(?<tscode>[0-9]{5})_([0-9]{8}).log" }
                }
		mutate{
			add_field => { "pname" => "rcssender" }
		}
	}

	grok {
		match => { "[log][file][path]" => "(?<year>[0-9]{4})(?<month>[0-9]{2})(?<day>[0-9]{2}).log$" }
	}

	grok {
		match => { "message" => "^\[%{DATA:pid}\]\[(?<time>%{TIME})\]\[%{LOGLEVEL:level}%{SPACE}\]\[%{DATA:thread}\] %{GREEDYDATA:description}" }
	}


	if [description] =~ /.?\brsMsgKey:\b/ and ![rskey] {
		grok{
			match => { "message" => ".+?\brsMsgKey:\b(?<rskey>[^ ]+)" }
		}
	}
	if [description] =~ /.?\bclientMsgKey:\b/ and ![emmakey] {
		grok{
			match => { "message" => ".+?\bclientMsgKey:\b(?<emmakey>[^ ]+)" }
		}
	}
	if [description] =~ /.?\brsMsgKey:\b/ and ![client_code] {
		grok{
			match => { "message" => ".?\brsMsgKey:\b(?<client_code>[^ ]{8})" }
		}
	}	
	if [description] =~ /.?\bstatusCode:\b/ and ![response_code] {
		grok{
			match => { "message" => ".?\bstatusCode:\b(?<response_code>[^ ]+)" }
		}
	}	
	if [description] =~ /.?\bresponse:\b/ and ![response] {
		grok{
			match => { "message" => ".?\bresponse:\b(?<response>[^ ]+)" }
		}
	}	
	if [description] =~ /.?\brsID:\b/ and ![rsid] {
		grok{
			match => { "message" => ".?\brsID:\b(?<rsid>[^ ]+)" }
		}
	}	
	if [description] =~ /.?\belapsedTime:\b/ and ![elapse_time] {
		grok{
		    match => { "message" => ".?\belapsedTime:\b(?<elapse_time>[^ ]+)" }
		}
		mutate {
			convert => {
				"elapse_time" => "integer"
			}
		}

	    }   
	    if [description] =~ /.?\bRS_elapsedTime:\b/ and ![rs_elapse_time] {
		grok{
		    match => { "message" => ".?\bRS_elapsedTime:\b(?<rs_elapse_time>[^ ]+)" }
		}
		mutate {
			convert => {
				"rs_elapse_time" => "integer"
			}
		}
	    }   
	    if [description] =~ /.?\bTS_elapsedTime:\b/ and ![ts_elapse_time] {
		grok{
		    match => { "message" => ".?\bTS_elapsedTime:\b(?<ts_elapse_time>[^ ]+)" }
		}
		mutate {
			convert => {
				"ts_elapse_time" => "integer"
			}
		}
	    }
	if [description] =~ "^\(queue\)" {
		if [description] =~ /.?\bQueueName:\b/ and ![queue][name]{
			grok{
				match => { "message" => ".?\bQueueName:\b(?<queuename>[^ ]+)" }
			}
			mutate{
				add_field => { "[queue_name]" => "%{[queuename]}" }
			}
		}
		if [description] =~ /.?\bsize:\b/ and ![queue][size]{
			grok{
				match => { "message" => ".?\bsize:\b(?<queuesize>[^ ]+)" }
			}
			mutate{
				add_field => { "[queue_size]" => "%{[queuesize]}" }
			}
			mutate {
				convert => {
					"queue_size" => "integer"
				}
			}
		}
		mutate{
			add_field => {  
				"[@metadata][action]" => "create-queue"
			} 
		}          
	}

	mutate{
		add_field => { "logdate" => "%{year}/%{month}/%{day} %{time}" }
	}

	if [logdate] {
		date {
			match => [ "logdate", "yyyy/MM/dd HH:mm:ss.SSS" ]
			locale => "ko"
			timezone => "Asia/Seoul"
			target => "logdate"
		}
	}
	if [level] == "ERROR" {
		mutate{
			add_field => { "[@metadata][action]" => "create-alert" }
		}
	}
	if [pname] == "rcssender" and [level] != "ERROR" {
		mutate{
			add_field => { "ts_send_date" => "%{logdate}" }
		}
		mutate{
			add_field => { "[@metadata][action]" => "update" }
		}
		mutate{
			remove_field => ["level", "thread", "description", "message",
							"[host][name]", "response_code", "response" ]
		}
	}

	mutate{
		remove_field => ["year", "month", "day", "time", "agent", "ecs",
						"queuename", "queuesize", "tmp_recv_date", "pname"
		] 
	}

	if "beats_input_codec_plain_applied" in [tags] {
		mutate {
			remove_tag => ["beats_input_codec_plain_applied"]
		}
	}
}

output {
	if "_grokparsefailure" in [tags] {
		stdout { codec  => rubydebug { metadata => true } }
	}

	if "create-alert" in [@metadata][action] {
		elasticsearch {
			hosts => ["http://10.88.1.1:9200", "http://10.88.1.2:9200", "http://10.88.1.3:9200"]
			user => "elastic"
			password => "pwelastic"
			ilm_rollover_alias => "rcsts-alertlog"
			ilm_pattern => "000001"
			ilm_policy => "ilm-gw-applog"
			action => "create"
		}
	}
	if "create-queue" in [@metadata][action] {
		elasticsearch {
			hosts => ["http://10.88.1.1:9200", "http://10.88.1.2:9200", "http://10.88.1.3:9200"]
			user => "elastic"
			password => "pwelastic"
			ilm_rollover_alias => "rcsts-queue"
			ilm_pattern => "000001"
			ilm_policy => "ilm-gw-applog"
			action => "create"
		}
	}
	if "update" in [@metadata][action]{
		elasticsearch {
			hosts => ["http://10.88.1.1:9200", "http://10.88.1.2:9200", "http://10.88.1.3:9200"]
			user => "elastic"
			password => "pwelastic"
			ilm_rollover_alias => "rcsrs-tran"
			ilm_pattern => "000001"
			ilm_policy => "ilm-gw-tran"
			document_id => "%{[rsid]}_%{[emmakey]}_%{[rskey]}"
			action => "update"
			doc_as_upsert => true
		}
	}

}

