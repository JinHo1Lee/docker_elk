# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

#input {
#  beats {
#    port => 5045
#  }
#}

input {
  kafka {
    client_id => "logstash-test-topic"
    group_id => "logstash-test-topic"
    topics => ["rcsrs-send"]
    codec => json
    bootstrap_servers => "211.115.98.163:5045"
  }
}


filter {
	if [log][file][path] !~ /.?RS[A-Z]+[0-9]{8}.log/ and [log][file][path] !~ /.?RS[0-9]{8}.log/ {
		if [log][file][path] =~ /REST[0-9]{8}.log$/{
			grok {
				match => { "[log][file][path]" => "(?<client_id>[^\/](\w)+(?=_REST[0-9]{8}))" }
			}
		}else{
			grok {
				match => { "[log][file][path]" => "(?<client_id>[^\/](\w)+(?=[0-9]{8}))" }
			}
		}
	}

	grok {
		match => { "message" => "^\[(?<pid>.*?)\][T ](?<logdate>[0-9]{4}\/[0-9]{2}\/[0-9]{2}[T ][0-9]{2}:[0-9]{2}:[0-9]{2})(.*)[T ]\[(?<pname>.*?)\](?<description>.*)" }
	}

	if [description] =~ /^ \(/{
		grok {
			match => { "description" => "^ \((?<function>.*)\)"}
		}
	}
	
	if [message] =~ /.?\bmsgtype:\b/ and ![msgtype] {
		grok{
			match => { "message" => ".+?\bmsgtype:\b(?<msgtype>[^ ]+)" }
		}
	}
	if [message] =~ /.?\bAcptMsgKey:\b/ and ![emmakey] {
		grok{
			match => { "message" => ".+?\bAcptMsgKey:\b(?<emmakey>[^ ]+)" }
		}
	}
	if [message] =~ /.?\bemmakey:\b/ and ![emmakey] {
		grok{
			match => { "message" => ".+?\bemmakey:\b(?<emmakey>[^ ]+)" }
		}
	}
	if [message] =~ /.?\brskey:\b/ and ![rskey] {
		grok{
			match => { "message" => ".?\brskey:\b(?<rskey>[^ ]+)" }
		}
	}	
	if [message] =~ /.?\bRskey:\b/ and ![rskey] {
		grok{
			match => { "message" => ".?\bRskey:\b(?<rskey>[^ ]+)" }
		}
	}	
	if [message] =~ /.?\bclntcode:\b/ and ![client_code] {
		grok{
			match => { "message" => ".?\bclntcode:\b(?<client_code>[^ ]+)" }
		}
	}	

	if [message] =~ /.?\brskey:\b/ and ![client_code] {
		grok{
			match => { "message" => ".?\brskey:\b(?<client_code>[^ ]{8})" }
		}
	}	
	if [message] =~ /.?\bRskey:\b/ and ![client_code] {
		grok{
			match => { "message" => ".?\bRskey:\b(?<client_code>[^ ]{8})" }
		}
	}	

	if [message] =~ /.?\brtg_id:\b/ and ![rtg_id] {
		grok{
			match => { "message" => ".+?\brtg_id:\b(?<rtg_id>[^ ]+)" }
		}
	}	
	if [message] =~ /.?\bcallback:\b/ and ![callback] {
		grok{
			match => { "message" => ".+?\bcallback:\b(?<callback>[^ ]+)" }
		}
	}	
	if [message] =~ /.?\breason:\b/ {
		grok{
			match => { "message" => ".+?\breason:\b(?<reason>.*)" }
		}
	}
	if [message] =~ /.?\bcode:\b/ {
		grok{
			match => { "message" => ".+?\bcode:\b(?<code>[^ ]+)" }
		}
	}
	if [message] =~ /.?\brecipient:\b/ and ![recipient] {
		if [message] =~ /.?order:\b/ {
			grok{
				match => { "message" => ".+?order:\b+(?<seq>[^ ]+)" }
			}
			if [pname] == "rs"{
				grok{
					match => { "message" => ".+?recipient:\b+(?<recipient>[^ ]+)" }
				}
			}else{
				grok{
					match => { "message" => ".+?recipient:\b+(?<recipient>[^_]+)[_](?<country_code>[^ ]+)" }
				}
			}
		}else{
			grok{
				match => { "message" => ".+?recipient:\b+(?<seq>[^_])[_](?<recipient>[^_]+)[_](?<country_code>[^ ]+)" }
			}
		}
	}	
	if [message] =~ /.?\bnetrslt:\b/ and ![netrslt] {
		grok{
			match => { "message" => ".+?\bnetrslt:\b(?<netrslt>[^ ]+)" }
		}
	}	
	if [message] =~ /.?\bibrslt:\b/ and ![ibrslt] {
		grok{
			match => { "message" => ".+?\bibrslt:\b(?<ibrslt>[^ ]+)" }
		}
	}	
	if [message] =~ /.?\brsid:\b/ and ![rsid] {
		grok{
			match => { "message" => ".+?\brsid:\b(?<rsid>[^ ]+)" }
		}
	}	

	if [message] =~ /.?\bcarrier:\b/ and ![carrier] {
		grok{
			match => { "message" => ".+?carrier:\b+(?<carrier>[^ ]+)" }
		}
	}	
	if [message] =~ /.?\bnprslt:\b/ and ![nprslt] {
		grok{
			match => { "message" => ".+?\bnprslt:\b(?<nprslt>[^ ]+)" }
		}
	}	
	if [message] =~ /.?\bacptkey:\b/ and ![emmakey] {
		grok{
			match => { "message" => ".+?\bacptkey:\b(?<emmakey>[^ ]+)" }
		}
	}	

	if [message] =~ /.?\brcsConv:\b/ and ![rcs][convert] {
		grok{
			match => { "message" => ".+?\brcsConv:\b(?<rcsConv>[^ ]+)" }
		}
		if [rcsConv] != "0"{
			mutate{
				add_field => {
					"[rcs][convert]" => "Y"
				}
			}
		}else{
			mutate{
				add_field => {
					"[rcs][convert]" => "N"
				}
			}
		}
	}	
	if [message] =~ /.?RCS Info:/ and ![rcs][info] {
		grok{
			match => { "message" => ".+?RCS Info:\W(?<rcsinfo>[^\]]+)" }
		}
		if [rcsinfo] {
			mutate{
				add_field => {
					"[rcs][info]" => "%{rcsinfo}"
				}
			}
		}
	}	

	if [message] =~ /.?applPduType:/ and ![pdutype] {
		grok{
			match => { "message" => ".+?\bapplPduType:\b(?<pdutype>[^ ]+)" }
		}
	}
	if [message] =~ /.?pdutype:/ and ![pdutype] {
		grok{
			match => { "message" => ".+?\bpdutype:\b(?<pdutype>[^ ]+)" }
		}
	}

#	if [message] =~ /.?tssentdate:/ and ![ts_send_date] {
#		grok{
#			match => { "message" => ".+?\btssentdate:\b(?<tmp>[^ ]+)" }
#		}
#		ruby{
#			code => "
#				event.set('ts_send_date', Time.at(event.get('tmp').to_i).utc.strftime('%Y-%m-%dT%H:%M:%S.000Z').to_s)
#			"
#		}
#		mutate{
#			add_field => {	
#					"[@metadata][action]" => "update"
#			 }
#		}
#		mutate{
#			remove_field => [ "tmp" ]
#		}
#	}


	if [message] =~ /.rsltType:FailoverMt/ {
		mutate{
			add_field => { "failover.mt" => true }
		}
	}

	if [logdate] {
		date {
			match => [ "logdate", "yyyy/MM/dd HH:mm:ss" ]
			locale => "ko"
			timezone => "Asia/Seoul"
			target => "logdate"
		}
	}

	
	if ([pname] == "mr" and [message] =~ /.?insert RecvQ/) or ([pname] =="mqc" and [description] =~ /.?AcptMsgKey/) {
		mutate{
			add_field => { "recv_date" => "%{logdate}" }
		}
	}

	if [pname] == "ia"{
		mutate{
			add_field => { "route_date" => "%{logdate}" }
		}

		if [message] =~ /send.*bat.*\.que/ {
		    mutate{
			add_field => { "batch" => true }
		    }
		}

		if [message] =~ /.?\bno route\b/ {
			mutate{
				add_field => {
						"ibrslt" => "3015"
						"mt.ibrslt" => "3015"
						"rcs.ibrslt" => "3015"
						"rslt_date" => "%{logdate}"
					}
			}

		}
		if [message] =~ /.?\btscode:\b/ {
			grok{
				match => { "message" => ".+?\btscode:\b(?<tscode>[^ ]+)" }
			}
		}
	}

	if [pname] == "ms" and [function] =~ "req$" {
		if [message] !~ /.?\(null\):0\W/
		{
			mutate{
				add_field => { "rs_send_date" => "%{logdate}" }
			}
			if [function] != "rcsmt req" {
				if ![ts_send_date] {
					mutate{
						add_field => { "ts_send_date" => "%{logdate}" }
					}
				}
			}
		}
	}

	if ([pname] == "rr") and ([function] =~ "TsApplySucc$") {
		if [message] =~ /.?\btscode:\b/ {
			grok{
				match => { "message" => ".+?\btscode:\b(?<tscode>[^ ]+)" }
			}
		}
	}

	if ([pname] == "rr" or [pname] =="rrp") and ([function] =~ "report$" or [function] =~ "np$") {
		mutate{
			add_field => {  
			"[ts][rslt_date]" => "%{logdate}"
			"[@metadata][action]" => "create-rslt"
			} 
		}          

		if [ibrslt] {
			mutate{
			rename => { "ibrslt" => "[ts][ibrslt]" }
			}
		}
		if [netrslt] {
			mutate{
			rename => { "netrslt" => "[ts][netrslt]" }
			}
		}

		mutate{
			add_field => {
			"[@metadata][action]" => "update"
			}
		}

		if [message] =~ /.?\btscode:\b/ {
			grok{
			match => { "message" => ".+?\btscode:\b(?<tscode>[^ ]+)" }
			}
		}
	}

	if ([pname] == "rs" or [pname] == "rrw") and [function] =~ "report$" {
		mutate{
			add_field => {	
					"rslt_date" => "%{logdate}"
			 }
		}
		if [carrier] =~ "^2" {
			mutate{
				add_field => { "rcs.ibrslt" => "%{ibrslt}" }
			}
		}else{
			mutate{
				add_field => { "mt.ibrslt" => "%{ibrslt}" }
			}
		}
	}


	if [message] =~ /.?ALERT\b/ or [message] =~ /.?Check Route Rule\W/{
		mutate{
			add_field => { "[@metadata][action]" => "create-alert" }
		}
	}else{
		if [function] == "alert req"{
			mutate{
				add_field => { "[@metadata][action]" => "nothing" }
			}
		}
		if [pname] == "mr" and [message] =~ /.?REJECT/ {
			mutate{
				add_field => {
					"[@metadata][action]" => "create-fail-req"
					"recv_date" => "%{logdate}"
				}
			}
		} else{
			if "_grokparsefailure" not in [tags] {
				mutate{
					remove_field => [ "message", "description"]
				}
			}
			if [pname] != "rr" and [client_code] and [emmakey] and [rskey] {
				mutate{
					add_field => {	
							"[@metadata][action]" => "update"
					 }
				}
			}
		}
	}


	if "create-alert" not in [@metadata][action]
	{
		mutate{
			remove_field => [ "agent", "ecs", "pid", "logdate", "pname", "rcsConv", "rcsinfo",
							"tmp_recv_date", "tmp_ts_send_date", "tmp_rs_send_date", "description", "tmp_failover.mt"
			]
		}
	}

	if "beats_input_codec_plain_applied" in [tags] {
		mutate {
			remove_tag => ["beats_input_codec_plain_applied"]
		}
	}
}


output {
	if "_grokparsefailure" in [tags] {
		stdout { codec  => rubydebug { metadata => true } }
	}


	if "create-alert" in [@metadata][action]{
		elasticsearch {
			hosts => ["http://10.88.1.1:9200", "http://10.88.1.2:9200", "http://10.88.1.3:9200"]
			user => "elastic"
			password => "pwelastic"
			ilm_rollover_alias => "rcsrs-alertlog"
			ilm_pattern => "000001"
			ilm_policy => "ilm-gw-applog"
			action => "create"
		}
	} 
	if "create-rslt" in [@metadata][action]{
		elasticsearch {
			hosts => ["http://10.88.1.1:9200", "http://10.88.1.2:9200", "http://10.88.1.3:9200"]
			user => "elastic"
			password => "pwelastic"
			ilm_rollover_alias => "rcsrs-rsltlog"
			ilm_pattern => "000001"
			ilm_policy => "ilm-gw-tran"
			action => "create"
		}
	} 
	if "create-fail-req" in [@metadata][action] {
		elasticsearch {
			hosts => ["http://10.88.1.1:9200", "http://10.88.1.2:9200", "http://10.88.1.3:9200"]
			user => "elastic"
			password => "pwelastic"
			ilm_rollover_alias => "rcsrs-reslog"
			ilm_pattern => "000001"
			ilm_policy => "ilm-gw-applog"
			action => "create"
		}
	}
	if "update" in [@metadata][action]{
		elasticsearch {
			hosts => ["http://10.88.1.1:9200", "http://10.88.1.2:9200", "http://10.88.1.3:9200"]
			user => "elastic"
			password => "pwelastic"
			ilm_rollover_alias => "rcsrs-tran"
			ilm_pattern => "000001"
			ilm_policy => "ilm-gw-tran"
			document_id => "%{[rsid]}_%{[emmakey]}_%{[rskey]}"
			action => "update"
			doc_as_upsert => true
		}
	}
}

